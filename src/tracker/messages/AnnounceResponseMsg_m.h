//
// Generated file, do not edit! Created by nedtool 5.0 from tracker/messages/AnnounceResponseMsg.msg.
//

#ifndef __ANNOUNCERESPONSEMSG_M_H
#define __ANNOUNCERESPONSEMSG_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
// EbitSim - Enhanced BitTorrent Simulation
// This program is under the terms of the Creative Commons
// Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)
//
// You are free:
//
//    to Share - to copy, distribute and transmit the work
//    to Remix - to adapt the work
//
// Under the following conditions:
//
//    Attribution - You must attribute the work in the manner specified by the
//    author or licensor (but not in any way that suggests that they endorse you
//    or your use of the work).
//
//    Noncommercial - You may not use this work for commercial purposes.
//
//    Share Alike - If you alter, transform, or build upon this work, you may
//    distribute the resulting work only under the same or similar license to
//    this one.
//
// With the understanding that:
//
//    Waiver - Any of the above conditions can be waived if you get permission
//    from the copyright holder.
//
//    Public Domain - Where the work or any of its elements is in the public
//    domain under applicable law, that status is in no way affected by the
//    license.
//
//    Other Rights - In no way are any of the following rights affected by the
//    license:
//        - Your fair dealing or fair use rights, or other applicable copyright
//          exceptions and limitations;
//        - The author's moral rights;
//        - Rights other persons may have either in the work itself or in how
//          the work is used, such as publicity or privacy rights.
//
//    Notice - For any reuse or distribution, you must make clear to others the
//    license terms of this work. The best way to do this is with a link to this
//    web page. <http://creativecommons.org/licenses/by-nc-sa/3.0/>
//
// Author:
//     Pedro Manoel Fabiano Alves Evangelista <pevangelista@larc.usp.br>
//     Supervised by Prof Tereza Cristina M. B. Carvalho <carvalho@larc.usp.br>
//     Graduate Student at Escola Politecnica of University of Sao Paulo, Brazil
//
// Contributors:
//     Marcelo Carneiro do Amaral <mamaral@larc.usp.br>
//     Victor Souza <victor.souza@ericsson.com>
//
// Disclaimer:
//     This work is part of a Master Thesis developed by:
//        Pedro Evangelista, graduate student at
//        Laboratory of Computer Networks and Architecture
//        Escola Politecnica
//        University of Sao Paulo
//        Brazil
//     and supported by:
//        Innovation Center
//        Ericsson Telecomunicacoes S.A., Brazil.
//
// UNLESS OTHERWISE MUTUALLY AGREED TO BY THE PARTIES IN WRITING AND TO THE
// FULLEST EXTENT PERMITTED BY APPLICABLE LAW, LICENSOR OFFERS THE WORK AS-IS
// AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE WORK,
// EXPRESS, IMPLIED, STATUTORY OR OTHERWISE, INCLUDING, WITHOUT LIMITATION,
// WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
// NONINFRINGEMENT, OR THE ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE
// PRESENCE OF ABSENCE OF ERRORS, WHETHER OR NOT DISCOVERABLE. SOME
// JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF IMPLIED WARRANTIES, SO THIS
// EXCLUSION MAY NOT APPLY TO YOU.

#include "PeerInfo.h"
// }}

/**
 * Class generated from <tt>tracker/messages/AnnounceResponseMsg.msg:79</tt> by nedtool.
 * <pre>
 * packet AnnounceResponseMsg
 * {
 *     string failureReason;   // Human readable message about the failure reason.
 *     string warningMessage;  // Similar to the failureReason text, but the message is processed normally.
 *     unsigned int interval;  // The recommended interval between requests.
 *     unsigned int minInterval; // The minimum interval peers must obey.
 *     int trackerId;       // The Id of the Tracker.
 *     unsigned int complete;  // The number of Seeders in the swarm.
 *     unsigned int incomplete;// The number of Leechers in the swarm.
 *     PeerInfo peers[];       // The list of peers to be used by the requesting peer.
 *     string bencodedResponse;// bencoded version of the response.
 * }
 * </pre>
 */
class AnnounceResponseMsg : public ::omnetpp::cPacket
{
  protected:
    ::omnetpp::opp_string failureReason;
    ::omnetpp::opp_string warningMessage;
    unsigned int interval;
    unsigned int minInterval;
    int trackerId;
    unsigned int complete;
    unsigned int incomplete;
    PeerInfo *peers; // array ptr
    unsigned int peers_arraysize;
    ::omnetpp::opp_string bencodedResponse;

  private:
    void copy(const AnnounceResponseMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AnnounceResponseMsg&);

  public:
    AnnounceResponseMsg(const char *name=nullptr, int kind=0);
    AnnounceResponseMsg(const AnnounceResponseMsg& other);
    virtual ~AnnounceResponseMsg();
    AnnounceResponseMsg& operator=(const AnnounceResponseMsg& other);
    virtual AnnounceResponseMsg *dup() const {return new AnnounceResponseMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getFailureReason() const;
    virtual void setFailureReason(const char * failureReason);
    virtual const char * getWarningMessage() const;
    virtual void setWarningMessage(const char * warningMessage);
    virtual unsigned int getInterval() const;
    virtual void setInterval(unsigned int interval);
    virtual unsigned int getMinInterval() const;
    virtual void setMinInterval(unsigned int minInterval);
    virtual int getTrackerId() const;
    virtual void setTrackerId(int trackerId);
    virtual unsigned int getComplete() const;
    virtual void setComplete(unsigned int complete);
    virtual unsigned int getIncomplete() const;
    virtual void setIncomplete(unsigned int incomplete);
    virtual void setPeersArraySize(unsigned int size);
    virtual unsigned int getPeersArraySize() const;
    virtual PeerInfo& getPeers(unsigned int k);
    virtual const PeerInfo& getPeers(unsigned int k) const {return const_cast<AnnounceResponseMsg*>(this)->getPeers(k);}
    virtual void setPeers(unsigned int k, const PeerInfo& peers);
    virtual const char * getBencodedResponse() const;
    virtual void setBencodedResponse(const char * bencodedResponse);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AnnounceResponseMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AnnounceResponseMsg& obj) {obj.parsimUnpack(b);}


#endif // ifndef __ANNOUNCERESPONSEMSG_M_H

