//
// Generated file, do not edit! Created by nedtool 5.0 from tracker/messages/AnnounceRequestMsg.msg.
//

#ifndef __ANNOUNCEREQUESTMSG_M_H
#define __ANNOUNCEREQUESTMSG_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
// EbitSim - Enhanced BitTorrent Simulation
// This program is under the terms of the Creative Commons
// Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)
//
// You are free:
//
//    to Share - to copy, distribute and transmit the work
//    to Remix - to adapt the work
//
// Under the following conditions:
//
//    Attribution - You must attribute the work in the manner specified by the
//    author or licensor (but not in any way that suggests that they endorse you
//    or your use of the work).
//
//    Noncommercial - You may not use this work for commercial purposes.
//
//    Share Alike - If you alter, transform, or build upon this work, you may
//    distribute the resulting work only under the same or similar license to
//    this one.
//
// With the understanding that:
//
//    Waiver - Any of the above conditions can be waived if you get permission
//    from the copyright holder.
//
//    Public Domain - Where the work or any of its elements is in the public
//    domain under applicable law, that status is in no way affected by the
//    license.
//
//    Other Rights - In no way are any of the following rights affected by the
//    license:
//        - Your fair dealing or fair use rights, or other applicable copyright
//          exceptions and limitations;
//        - The author's moral rights;
//        - Rights other persons may have either in the work itself or in how
//          the work is used, such as publicity or privacy rights.
//
//    Notice - For any reuse or distribution, you must make clear to others the
//    license terms of this work. The best way to do this is with a link to this
//    web page. <http://creativecommons.org/licenses/by-nc-sa/3.0/>
//
// Author:
//     Pedro Manoel Fabiano Alves Evangelista <pevangelista@larc.usp.br>
//     Supervised by Prof Tereza Cristina M. B. Carvalho <carvalho@larc.usp.br>
//     Graduate Student at Escola Politecnica of University of Sao Paulo, Brazil
//
// Contributors:
//     Marcelo Carneiro do Amaral <mamaral@larc.usp.br>
//     Victor Souza <victor.souza@ericsson.com>
//
// Disclaimer:
//     This work is part of a Master Thesis developed by:
//        Pedro Evangelista, graduate student at
//        Laboratory of Computer Networks and Architecture
//        Escola Politecnica
//        University of Sao Paulo
//        Brazil
//     and supported by:
//        Innovation Center
//        Ericsson Telecomunicacoes S.A., Brazil.
//
// UNLESS OTHERWISE MUTUALLY AGREED TO BY THE PARTIES IN WRITING AND TO THE
// FULLEST EXTENT PERMITTED BY APPLICABLE LAW, LICENSOR OFFERS THE WORK AS-IS
// AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE WORK,
// EXPRESS, IMPLIED, STATUTORY OR OTHERWISE, INCLUDING, WITHOUT LIMITATION,
// WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
// NONINFRINGEMENT, OR THE ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE
// PRESENCE OF ABSENCE OF ERRORS, WHETHER OR NOT DISCOVERABLE. SOME
// JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF IMPLIED WARRANTIES, SO THIS
// EXCLUSION MAY NOT APPLY TO YOU.

#include "BitField.h"
// }}

/**
 * Enum generated from <tt>tracker/messages/AnnounceRequestMsg.msg:81</tt> by nedtool.
 * <pre>
 * // announce event types
 * enum AnnounceType
 * {
 * 
 *     A_STARTED = 1; // announce event=started
 *     A_STOPPED = 2; // announce event=stopped
 *     A_COMPLETED = 3; // announce event=completed
 *     A_NORMAL = 4; // normal announce (after started and before completed)
 * }
 * </pre>
 */
enum AnnounceType {
    A_STARTED = 1,
    A_STOPPED = 2,
    A_COMPLETED = 3,
    A_NORMAL = 4
};

/**
 * Class generated from <tt>tracker/messages/AnnounceRequestMsg.msg:89</tt> by nedtool.
 * <pre>
 * packet AnnounceRequestMsg
 * {
 *     // The following header was extracted from a real request, and is being used
 *     // as base for the request size, with length of 163 bytes. Attention to the
 *     // newline character at the end.
 *     //
 *     // "GET /announce?<Announce URL> HTTP/1.1
 *     // User-Agent: Java/1.6.0_14
 *     // Host: XXX.XXX.XXX.XXX:XXXX
 *     // Accept: text/html, image/gif, image/jpeg, *; q=.2,   *; q=.2
 *     // Connection: keep-alive
 *     //
 *     // ?infohash=XXXXXXXXXXXXXXXXXXXX&event=A_STARTED&numwant=XXX&peer_id=XXXXXXXXXXXXXXX&port=1234 
 *     // "
 *     // It is being used as the base size for the message.
 *     int messageLength = 272;
 * 
 *     // string representation of the announce, determine the size of the message
 *     string urlEncodedRequest;
 * 
 *     // The info hash of the content (swarm).
 *     int infoHash;
 * 
 *     // announce parameters
 *     //bool compact;               // True if the requester wants a compact response.
 *     double downloaded;    // The number of bytes downloaded by the requesting peer.
 *     int event @enum(AnnounceType); // The type of the event that generated this request.
 *     unsigned int numWant;       // The maximum number of peers wanted.
 *     int peerId;                 // The Id of the requesting peer. See PeerEntry for more info on the Peer id.
 *     unsigned int port;          // The port that the peer is listening for connections with other peers.
 *     double uploaded;      // The number of bytes uploaded by the requesting peer.
 * }
 * </pre>
 */
class AnnounceRequestMsg : public ::omnetpp::cPacket
{
  protected:
    int messageLength;
    ::omnetpp::opp_string urlEncodedRequest;
    int infoHash;
    double downloaded;
    int event;
    unsigned int numWant;
    int peerId;
    unsigned int port;
    double uploaded;

  private:
    void copy(const AnnounceRequestMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AnnounceRequestMsg&);

  public:
    AnnounceRequestMsg(const char *name=nullptr, int kind=0);
    AnnounceRequestMsg(const AnnounceRequestMsg& other);
    virtual ~AnnounceRequestMsg();
    AnnounceRequestMsg& operator=(const AnnounceRequestMsg& other);
    virtual AnnounceRequestMsg *dup() const {return new AnnounceRequestMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getMessageLength() const;
    virtual void setMessageLength(int messageLength);
    virtual const char * getUrlEncodedRequest() const;
    virtual void setUrlEncodedRequest(const char * urlEncodedRequest);
    virtual int getInfoHash() const;
    virtual void setInfoHash(int infoHash);
    virtual double getDownloaded() const;
    virtual void setDownloaded(double downloaded);
    virtual int getEvent() const;
    virtual void setEvent(int event);
    virtual unsigned int getNumWant() const;
    virtual void setNumWant(unsigned int numWant);
    virtual int getPeerId() const;
    virtual void setPeerId(int peerId);
    virtual unsigned int getPort() const;
    virtual void setPort(unsigned int port);
    virtual double getUploaded() const;
    virtual void setUploaded(double uploaded);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AnnounceRequestMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AnnounceRequestMsg& obj) {obj.parsimUnpack(b);}


#endif // ifndef __ANNOUNCEREQUESTMSG_M_H

