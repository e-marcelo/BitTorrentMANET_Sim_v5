//
// Generated file, do not edit! Created by nedtool 5.0 from client/messages/PeerWire.msg.
//

#ifndef __PEERWIRE_M_H
#define __PEERWIRE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
// EbitSim - Enhanced BitTorrent Simulation
// This program is under the terms of the Creative Commons
// Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)
//
// You are free:
//
//    to Share - to copy, distribute and transmit the work
//    to Remix - to adapt the work
//
// Under the following conditions:
//
//    Attribution - You must attribute the work in the manner specified by the
//    author or licensor (but not in any way that suggests that they endorse you
//    or your use of the work).
//
//    Noncommercial - You may not use this work for commercial purposes.
//
//    Share Alike - If you alter, transform, or build upon this work, you may
//    distribute the resulting work only under the same or similar license to
//    this one.
//
// With the understanding that:
//
//    Waiver - Any of the above conditions can be waived if you get permission
//    from the copyright holder.
//
//    Public Domain - Where the work or any of its elements is in the public
//    domain under applicable law, that status is in no way affected by the
//    license.
//
//    Other Rights - In no way are any of the following rights affected by the
//    license:
//        - Your fair dealing or fair use rights, or other applicable copyright
//          exceptions and limitations;
//        - The author's moral rights;
//        - Rights other persons may have either in the work itself or in how
//          the work is used, such as publicity or privacy rights.
//
//    Notice - For any reuse or distribution, you must make clear to others the
//    license terms of this work. The best way to do this is with a link to this
//    web page. <http://creativecommons.org/licenses/by-nc-sa/3.0/>
//
// Author:
//     Pedro Manoel Fabiano Alves Evangelista <pevangelista@larc.usp.br>
//     Supervised by Prof Tereza Cristina M. B. Carvalho <carvalho@larc.usp.br>
//     Graduate Student at Escola Politecnica of University of Sao Paulo, Brazil
//
// Contributors:
//     Marcelo Carneiro do Amaral <mamaral@larc.usp.br>
//     Victor Souza <victor.souza@ericsson.com>
//
// Disclaimer:
//     This work is part of a Master Thesis developed by:
//        Pedro Evangelista, graduate student at
//        Laboratory of Computer Networks and Architecture
//        Escola Politecnica
//        University of Sao Paulo
//        Brazil
//     and supported by:
//        Innovation Center
//        Ericsson Telecomunicacoes S.A., Brazil.
//
// UNLESS OTHERWISE MUTUALLY AGREED TO BY THE PARTIES IN WRITING AND TO THE
// FULLEST EXTENT PERMITTED BY APPLICABLE LAW, LICENSOR OFFERS THE WORK AS-IS
// AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE WORK,
// EXPRESS, IMPLIED, STATUTORY OR OTHERWISE, INCLUDING, WITHOUT LIMITATION,
// WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
// NONINFRINGEMENT, OR THE ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE
// PRESENCE OF ABSENCE OF ERRORS, WHETHER OR NOT DISCOVERABLE. SOME
// JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF IMPLIED WARRANTIES, SO THIS
// EXCLUSION MAY NOT APPLY TO YOU.
// }}

/**
 * Enum generated from <tt>client/messages/PeerWire.msg:75</tt> by nedtool.
 * <pre>
 * enum PeerWireMessageType
 * {
 * 
 *     PW_CHOKE_MSG = 0;
 *     PW_UNCHOKE_MSG = 1;
 *     PW_INTERESTED_MSG = 2;
 *     PW_NOT_INTERESTED_MSG = 3;
 *     PW_HAVE_MSG = 4;
 *     PW_BITFIELD_MSG = 5;
 *     PW_REQUEST_MSG = 6;
 *     PW_PIECE_MSG = 7;
 *     PW_CANCEL_MSG = 8;
 *     // id given to simplify the code (the real keep-alive don't have an id field)
 *     PW_KEEP_ALIVE_MSG = 9;
 *     PW_HANDSHAKE_MSG = 10;
 * }
 * </pre>
 */
enum PeerWireMessageType {
    PW_CHOKE_MSG = 0,
    PW_UNCHOKE_MSG = 1,
    PW_INTERESTED_MSG = 2,
    PW_NOT_INTERESTED_MSG = 3,
    PW_HAVE_MSG = 4,
    PW_BITFIELD_MSG = 5,
    PW_REQUEST_MSG = 6,
    PW_PIECE_MSG = 7,
    PW_CANCEL_MSG = 8,
    PW_KEEP_ALIVE_MSG = 9,
    PW_HANDSHAKE_MSG = 10
};

// cplusplus {{
#include "BitField.h"
// }}

/**
 * Class generated from <tt>client/messages/PeerWire.msg:101</tt> by nedtool.
 * <pre>
 * //
 * // The basic PeerWire message. All messages subclasses from this.
 * // A PeerWire message is composed of three fields: <length><id><payload>
 * // The payload greatly changes depending on the message.
 * //
 * packet PeerWireMsg
 * {
 *     int headerLen = 4;
 *     // 4-byte big-endian value.
 *     int payloadLen = 1;
 *     // must be set to the size of the real payload for BitFieldMsg and PieceMsg
 *     int variablePayloadLen = 0;
 *     //single byte value.
 *     int messageId @enum(PeerWireMessageType);
 * }
 * </pre>
 */
class PeerWireMsg : public ::omnetpp::cPacket
{
  protected:
    int headerLen;
    int payloadLen;
    int variablePayloadLen;
    int messageId;

  private:
    void copy(const PeerWireMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PeerWireMsg&);

  public:
    PeerWireMsg(const char *name=nullptr, int kind=0);
    PeerWireMsg(const PeerWireMsg& other);
    virtual ~PeerWireMsg();
    PeerWireMsg& operator=(const PeerWireMsg& other);
    virtual PeerWireMsg *dup() const {return new PeerWireMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getHeaderLen() const;
    virtual void setHeaderLen(int headerLen);
    virtual int getPayloadLen() const;
    virtual void setPayloadLen(int payloadLen);
    virtual int getVariablePayloadLen() const;
    virtual void setVariablePayloadLen(int variablePayloadLen);
    virtual int getMessageId() const;
    virtual void setMessageId(int messageId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PeerWireMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PeerWireMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>client/messages/PeerWire.msg:116</tt> by nedtool.
 * <pre>
 * //
 * // When a Peer receives this message from another Peer, it knows that it is being
 * // choked by it and all piece requests will be ignored.
 * // This message has no payload.
 * //
 * packet ChokeMsg extends PeerWireMsg
 * {
 *     int messageId = PW_CHOKE_MSG;
 * }
 * </pre>
 */
class ChokeMsg : public ::PeerWireMsg
{
  protected:
    int messageId;

  private:
    void copy(const ChokeMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ChokeMsg&);

  public:
    ChokeMsg(const char *name=nullptr, int kind=0);
    ChokeMsg(const ChokeMsg& other);
    virtual ~ChokeMsg();
    ChokeMsg& operator=(const ChokeMsg& other);
    virtual ChokeMsg *dup() const {return new ChokeMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getMessageId() const;
    virtual void setMessageId(int messageId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ChokeMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ChokeMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>client/messages/PeerWire.msg:125</tt> by nedtool.
 * <pre>
 * //
 * // When a Peer receives this message from another Peer, it knows that it is possible
 * // to acquire data from it.
 * // This message has no payload.
 * //
 * packet UnchokeMsg extends PeerWireMsg
 * {
 *     int messageId = PW_UNCHOKE_MSG;
 * }
 * </pre>
 */
class UnchokeMsg : public ::PeerWireMsg
{
  protected:
    int messageId;

  private:
    void copy(const UnchokeMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UnchokeMsg&);

  public:
    UnchokeMsg(const char *name=nullptr, int kind=0);
    UnchokeMsg(const UnchokeMsg& other);
    virtual ~UnchokeMsg();
    UnchokeMsg& operator=(const UnchokeMsg& other);
    virtual UnchokeMsg *dup() const {return new UnchokeMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getMessageId() const;
    virtual void setMessageId(int messageId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const UnchokeMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, UnchokeMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>client/messages/PeerWire.msg:133</tt> by nedtool.
 * <pre>
 * //
 * // A Peer sends this message to another Peer when the content owned by that Peer is interesting to it.
 * // This message has no payload.
 * //
 * packet InterestedMsg extends PeerWireMsg
 * {
 *     int messageId = PW_INTERESTED_MSG;
 * }
 * </pre>
 */
class InterestedMsg : public ::PeerWireMsg
{
  protected:
    int messageId;

  private:
    void copy(const InterestedMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const InterestedMsg&);

  public:
    InterestedMsg(const char *name=nullptr, int kind=0);
    InterestedMsg(const InterestedMsg& other);
    virtual ~InterestedMsg();
    InterestedMsg& operator=(const InterestedMsg& other);
    virtual InterestedMsg *dup() const {return new InterestedMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getMessageId() const;
    virtual void setMessageId(int messageId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const InterestedMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, InterestedMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>client/messages/PeerWire.msg:142</tt> by nedtool.
 * <pre>
 * //
 * // If a Peer obtains all the content another Peer has, then this Peer becomes uninteresting and this message
 * // is sent.
 * // This message has no payload.
 * //
 * packet NotInterestedMsg extends PeerWireMsg
 * {
 *     int messageId = PW_NOT_INTERESTED_MSG;
 * }
 * </pre>
 */
class NotInterestedMsg : public ::PeerWireMsg
{
  protected:
    int messageId;

  private:
    void copy(const NotInterestedMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NotInterestedMsg&);

  public:
    NotInterestedMsg(const char *name=nullptr, int kind=0);
    NotInterestedMsg(const NotInterestedMsg& other);
    virtual ~NotInterestedMsg();
    NotInterestedMsg& operator=(const NotInterestedMsg& other);
    virtual NotInterestedMsg *dup() const {return new NotInterestedMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getMessageId() const;
    virtual void setMessageId(int messageId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NotInterestedMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NotInterestedMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>client/messages/PeerWire.msg:147</tt> by nedtool.
 * <pre>
 * // When a Peer finishes downloading a piece, this message is sent to all connected Peers.
 * packet HaveMsg extends PeerWireMsg
 * {
 *     int payloadLen = 5;
 *     int messageId = PW_HAVE_MSG;
 *     int index; // 4 bytes
 * }
 * </pre>
 */
class HaveMsg : public ::PeerWireMsg
{
  protected:
    int payloadLen;
    int messageId;
    int index;

  private:
    void copy(const HaveMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const HaveMsg&);

  public:
    HaveMsg(const char *name=nullptr, int kind=0);
    HaveMsg(const HaveMsg& other);
    virtual ~HaveMsg();
    HaveMsg& operator=(const HaveMsg& other);
    virtual HaveMsg *dup() const {return new HaveMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getPayloadLen() const;
    virtual void setPayloadLen(int payloadLen);
    virtual int getMessageId() const;
    virtual void setMessageId(int messageId);
    virtual int getIndex() const;
    virtual void setIndex(int index);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const HaveMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, HaveMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>client/messages/PeerWire.msg:163</tt> by nedtool.
 * <pre>
 * //
 * // A Peer sends this message when it wants to acquire a sub-piece.
 * // By analyzing only this message's parameters, it is plausible to
 * // assume that a Peer can request blocks of different sizes, but
 * // this behavior is undefined in modern BitTorrent clients. Some of
 * // them may actually drop the connection if the reqLength is different
 * // from the expected block size. This will be the behavior in this version
 * // of the simulation, but a possible extension is to allow different block
 * // sizes.
 * //
 * packet RequestMsg extends PeerWireMsg
 * {
 *     int payloadLen = 13;
 *     int messageId = PW_REQUEST_MSG;
 *     int index;
 *     int begin;
 *     int reqLength;
 * }
 * </pre>
 */
class RequestMsg : public ::PeerWireMsg
{
  protected:
    int payloadLen;
    int messageId;
    int index;
    int begin;
    int reqLength;

  private:
    void copy(const RequestMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RequestMsg&);

  public:
    RequestMsg(const char *name=nullptr, int kind=0);
    RequestMsg(const RequestMsg& other);
    virtual ~RequestMsg();
    RequestMsg& operator=(const RequestMsg& other);
    virtual RequestMsg *dup() const {return new RequestMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getPayloadLen() const;
    virtual void setPayloadLen(int payloadLen);
    virtual int getMessageId() const;
    virtual void setMessageId(int messageId);
    virtual int getIndex() const;
    virtual void setIndex(int index);
    virtual int getBegin() const;
    virtual void setBegin(int begin);
    virtual int getReqLength() const;
    virtual void setReqLength(int reqLength);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RequestMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RequestMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>client/messages/PeerWire.msg:176</tt> by nedtool.
 * <pre>
 * //
 * // Right after the handshake message, a Peer sends which pieces it has through a bitField.
 * // The length of the message depends on the size of the bitField (that is, the number of pieces).
 * // The bitField is defined in bytes, therefore all extra bits are set to zero.
 * //
 * packet BitFieldMsg extends PeerWireMsg
 * {
 *     int messageId = PW_BITFIELD_MSG;
 *     int payloadLen = 1 + 0; // must sum the number of pieces to the payload length
 *     BitField bitField;
 *     int numberOfPieces;
 * }
 * </pre>
 */
class BitFieldMsg : public ::PeerWireMsg
{
  protected:
    int messageId;
    int payloadLen;
    BitField bitField;
    int numberOfPieces;

  private:
    void copy(const BitFieldMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BitFieldMsg&);

  public:
    BitFieldMsg(const char *name=nullptr, int kind=0);
    BitFieldMsg(const BitFieldMsg& other);
    virtual ~BitFieldMsg();
    BitFieldMsg& operator=(const BitFieldMsg& other);
    virtual BitFieldMsg *dup() const {return new BitFieldMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getMessageId() const;
    virtual void setMessageId(int messageId);
    virtual int getPayloadLen() const;
    virtual void setPayloadLen(int payloadLen);
    virtual BitField& getBitField();
    virtual const BitField& getBitField() const {return const_cast<BitFieldMsg*>(this)->getBitField();}
    virtual void setBitField(const BitField& bitField);
    virtual int getNumberOfPieces() const;
    virtual void setNumberOfPieces(int numberOfPieces);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const BitFieldMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, BitFieldMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>client/messages/PeerWire.msg:188</tt> by nedtool.
 * <pre>
 * //
 * // The actual data exchanged between peers.
 * // The length is dependant on the size of the piece. The user must add to the msgLen
 * // the size of the block.
 * //
 * packet PieceMsg extends PeerWireMsg
 * {
 *     int payloadLen = 9 + 0; // must sum the block size to the payload length
 *     int messageId = PW_PIECE_MSG;
 *     int index;
 *     int begin;
 *     int blockSize;
 * }
 * </pre>
 */
class PieceMsg : public ::PeerWireMsg
{
  protected:
    int payloadLen;
    int messageId;
    int index;
    int begin;
    int blockSize;

  private:
    void copy(const PieceMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PieceMsg&);

  public:
    PieceMsg(const char *name=nullptr, int kind=0);
    PieceMsg(const PieceMsg& other);
    virtual ~PieceMsg();
    PieceMsg& operator=(const PieceMsg& other);
    virtual PieceMsg *dup() const {return new PieceMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getPayloadLen() const;
    virtual void setPayloadLen(int payloadLen);
    virtual int getMessageId() const;
    virtual void setMessageId(int messageId);
    virtual int getIndex() const;
    virtual void setIndex(int index);
    virtual int getBegin() const;
    virtual void setBegin(int begin);
    virtual int getBlockSize() const;
    virtual void setBlockSize(int blockSize);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PieceMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PieceMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>client/messages/PeerWire.msg:199</tt> by nedtool.
 * <pre>
 * //
 * // A Peer sends this message when it whishes to cancel a sub-piece request.
 * //
 * packet CancelMsg extends PeerWireMsg
 * {
 *     int payloadLen = 13;
 *     int messageId = PW_CANCEL_MSG;
 *     int index;
 *     int begin;
 *     int reqLength;
 * }
 * </pre>
 */
class CancelMsg : public ::PeerWireMsg
{
  protected:
    int payloadLen;
    int messageId;
    int index;
    int begin;
    int reqLength;

  private:
    void copy(const CancelMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CancelMsg&);

  public:
    CancelMsg(const char *name=nullptr, int kind=0);
    CancelMsg(const CancelMsg& other);
    virtual ~CancelMsg();
    CancelMsg& operator=(const CancelMsg& other);
    virtual CancelMsg *dup() const {return new CancelMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getPayloadLen() const;
    virtual void setPayloadLen(int payloadLen);
    virtual int getMessageId() const;
    virtual void setMessageId(int messageId);
    virtual int getIndex() const;
    virtual void setIndex(int index);
    virtual int getBegin() const;
    virtual void setBegin(int begin);
    virtual int getReqLength() const;
    virtual void setReqLength(int reqLength);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CancelMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CancelMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>client/messages/PeerWire.msg:212</tt> by nedtool.
 * <pre>
 * //
 * // If a Peer does not receive a keep-alive from another Peer before the timeout,
 * // then the connection between them must be closed.
 * // The keep-alive message is the only one that has length zero.
 * //
 * packet KeepAliveMsg extends PeerWireMsg
 * {
 *     int payloadLen = 0;
 *     int messageId = PW_KEEP_ALIVE_MSG;
 * }
 * </pre>
 */
class KeepAliveMsg : public ::PeerWireMsg
{
  protected:
    int payloadLen;
    int messageId;

  private:
    void copy(const KeepAliveMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const KeepAliveMsg&);

  public:
    KeepAliveMsg(const char *name=nullptr, int kind=0);
    KeepAliveMsg(const KeepAliveMsg& other);
    virtual ~KeepAliveMsg();
    KeepAliveMsg& operator=(const KeepAliveMsg& other);
    virtual KeepAliveMsg *dup() const {return new KeepAliveMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getPayloadLen() const;
    virtual void setPayloadLen(int payloadLen);
    virtual int getMessageId() const;
    virtual void setMessageId(int messageId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const KeepAliveMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, KeepAliveMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>client/messages/PeerWire.msg:223</tt> by nedtool.
 * <pre>
 * //
 * // The handshake msg is not part of the peer-wire protocol, but it was put here
 * // as a mean to simplify the message handling.
 * // The handshake exchanged between Peers when the connection is established.
 * // It is 49+len(pstr) bytes long. In this case, 68 bytes long.
 * //
 * packet Handshake extends PeerWireMsg
 * {
 *     int messageId = PW_HANDSHAKE_MSG;
 *     int length = 68; // (49+19).
 *     int pstrlen = 19;   // the length of the pstr.
 *     string pstr = "BitTorrent protocol";    // string identifying the protocol.
 *     int reserved = 0;       // 8 reserved bytes for extensions.
 *     int infoHash;    // 20-byte SHA1 hash.
 *     // The specification says the peerId is a 20-byte string, but to simplify
 *     // the code development, the id of the module is used instead, since it is
 *     // guaranteed to be unique.
 *     int peerId;
 * }
 * </pre>
 */
class Handshake : public ::PeerWireMsg
{
  protected:
    int messageId;
    int length;
    int pstrlen;
    ::omnetpp::opp_string pstr;
    int reserved;
    int infoHash;
    int peerId;

  private:
    void copy(const Handshake& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Handshake&);

  public:
    Handshake(const char *name=nullptr, int kind=0);
    Handshake(const Handshake& other);
    virtual ~Handshake();
    Handshake& operator=(const Handshake& other);
    virtual Handshake *dup() const {return new Handshake(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getMessageId() const;
    virtual void setMessageId(int messageId);
    virtual int getLength() const;
    virtual void setLength(int length);
    virtual int getPstrlen() const;
    virtual void setPstrlen(int pstrlen);
    virtual const char * getPstr() const;
    virtual void setPstr(const char * pstr);
    virtual int getReserved() const;
    virtual void setReserved(int reserved);
    virtual int getInfoHash() const;
    virtual void setInfoHash(int infoHash);
    virtual int getPeerId() const;
    virtual void setPeerId(int peerId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Handshake& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Handshake& obj) {obj.parsimUnpack(b);}


#endif // ifndef __PEERWIRE_M_H

