//
// Generated file, do not edit! Created by nedtool 5.0 from client/messages/UserCommand.msg.
//

#ifndef __USERCOMMAND_M_H
#define __USERCOMMAND_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
	//Mensaje del controlador
	#include "ClientController.h"
// }}

/**
 * Enum generated from <tt>client/messages/UserCommand.msg:10</tt> by nedtool.
 * <pre>
 * enum UserCommandKind
 * {
 * 
 *     USER_COMMAND_ENTER_SWARM = 0;
 *     USER_COMMAND_LEAVE_SWARM = 1;
 * }
 * </pre>
 */
enum UserCommandKind {
    USER_COMMAND_ENTER_SWARM = 0,
    USER_COMMAND_LEAVE_SWARM = 1
};

/**
 * Class generated from <tt>client/messages/UserCommand.msg:15</tt> by nedtool.
 * <pre>
 * class UserCommand
 * {
 * }
 * </pre>
 */
class UserCommand : public ::omnetpp::cObject
{
  protected:

  private:
    void copy(const UserCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UserCommand&);

  public:
    UserCommand();
    UserCommand(const UserCommand& other);
    virtual ~UserCommand();
    UserCommand& operator=(const UserCommand& other);
    virtual UserCommand *dup() const {return new UserCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const UserCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, UserCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>client/messages/UserCommand.msg:18</tt> by nedtool.
 * <pre>
 * class EnterSwarmCommand extends UserCommand
 * {
 *     TorrentMetadata torrentMetadata;
 *     bool seeder;
 *     int idDisplay;
 * }
 * </pre>
 */
class EnterSwarmCommand : public ::UserCommand
{
  protected:
    TorrentMetadata torrentMetadata;
    bool seeder;
    int idDisplay;

  private:
    void copy(const EnterSwarmCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EnterSwarmCommand&);

  public:
    EnterSwarmCommand();
    EnterSwarmCommand(const EnterSwarmCommand& other);
    virtual ~EnterSwarmCommand();
    EnterSwarmCommand& operator=(const EnterSwarmCommand& other);
    virtual EnterSwarmCommand *dup() const {return new EnterSwarmCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual TorrentMetadata& getTorrentMetadata();
    virtual const TorrentMetadata& getTorrentMetadata() const {return const_cast<EnterSwarmCommand*>(this)->getTorrentMetadata();}
    virtual void setTorrentMetadata(const TorrentMetadata& torrentMetadata);
    virtual bool getSeeder() const;
    virtual void setSeeder(bool seeder);
    virtual int getIdDisplay() const;
    virtual void setIdDisplay(int idDisplay);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EnterSwarmCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EnterSwarmCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>client/messages/UserCommand.msg:24</tt> by nedtool.
 * <pre>
 * class LeaveSwarmCommand extends UserCommand
 * {
 *     int infoHash;
 * }
 * </pre>
 */
class LeaveSwarmCommand : public ::UserCommand
{
  protected:
    int infoHash;

  private:
    void copy(const LeaveSwarmCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LeaveSwarmCommand&);

  public:
    LeaveSwarmCommand();
    LeaveSwarmCommand(const LeaveSwarmCommand& other);
    virtual ~LeaveSwarmCommand();
    LeaveSwarmCommand& operator=(const LeaveSwarmCommand& other);
    virtual LeaveSwarmCommand *dup() const {return new LeaveSwarmCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getInfoHash() const;
    virtual void setInfoHash(int infoHash);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LeaveSwarmCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LeaveSwarmCommand& obj) {obj.parsimUnpack(b);}


#endif // ifndef __USERCOMMAND_M_H

